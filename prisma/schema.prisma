datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  slug         String  @unique
  firstName    String?
  lastName     String?
  profilePhoto String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Monitor {
  id          String  @id @default(cuid())
  title       String
  type        String
  description String?

  enabled  Boolean @default(true)
  hasError Boolean @default(false)

  host       String?
  username   String?
  password   String?
  port       String?
  privateKey String?

  // fields sent from monitor
  caption      String?
  name         String?
  dnsHostName  String?
  domain       String?
  manufacturer String?
  model        String?
  os           String?
  osVersion    String?
  lastBootTime String?

  // cpu details
  cpuManufacturer String?
  cpuModel        String?
  cpuCores        String?
  cpuProcessors   String?
  cpuMaxSpeed     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // http details
  httpBody                String?
  httpAuthentication      String?
  httpUsername            String?
  httpPassword            String?
  httpIgnoreSsl           Boolean?
  httpBodyEncoding        String?
  httpUrl                 String?
  httpRequestMethod       String?
  httpHeaders             String?
  httpMaxRedirects        String?
  httpAcceptedStatusCodes String[]
  httpsAgent              String?
  httpDomain              String?
  httpWorkstation         String?

  drives Drive[]
  cpus   Cpu[]
  logs   MonitorLogs[]
  feeds  MonitorFeeds[]

  // notifications
  connectionNotify                   Boolean?
  connectionNotifyTypes              Notification[] @relation("connectionNotifyTypesTable")
  connectionNotifyResendAfterMinutes Int?
  connectionNotifySentAt             DateTime?

  rebootNotify       Boolean?
  rebootNotifyTypes  Notification[] @relation("rebootNotifyTypesTable")
  rebootNotifySentAt DateTime?
}

model MonitorFeeds {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  monitor   Monitor  @relation(fields: [monitorId], references: [id])
  monitorId String
  hasError  Boolean  @default(false)

  memoryFree  String?
  memoryTotal String?

  cpuLoad  String?
  cpuSpeed String?

  ping String?

  message String?
}

model MonitorLogs {
  id      String @id @default(cuid())
  message String
  type    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monitor   Monitor @relation(fields: [monitorId], references: [id])
  monitorId String

  drive   Drive?  @relation(fields: [driveId], references: [id])
  driveId String?
}

model Cpu {
  id        String     @id @default(cuid())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Monitor   Monitor?   @relation(fields: [monitorId], references: [id])
  monitorId String?
  usage     CpuUsage[]

  @@unique([monitorId, title])
}

model CpuUsage {
  id String @id @default(cuid())

  cpu   Cpu    @relation(fields: [cpuId], references: [id])
  cpuId String

  createdAt DateTime @default(now())

  // fields sent from monitor
  load  String?
  speed String?
}

model Drive {
  id          String  @id @default(cuid())
  title       String?
  description String?

  hasError Boolean @default(false)

  monitor   Monitor @relation(fields: [monitorId], references: [id])
  monitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  // fields sent from monitor
  location          String?
  name              String
  root              String?
  systemDescription String?
  size              String?

  daysTillFull String?
  growthRate   String?

  usage DriveUsage[]

  // notifications
  missingNotify                   Boolean?
  missingNotifyTypes              Notification[] @relation("missingNotifyTypesTable")
  missingNotifyResendAfterMinutes Int?
  missingNotifySentAt             DateTime?

  percFreeNotify                   Boolean?
  percFreeNotifyTypes              Notification[] @relation("percFreeNotifyTypesTable")
  percFreeValue                    Int?
  percFreeNotifyResendAfterMinutes Int?
  percFreeNotifySentAt             DateTime?

  sizeFreeNotify                   Boolean?
  sizeFreeNotifyTypes              Notification[] @relation("sizeFreeNotifyTypesTable")
  sizeFreeValue                    Int?
  sizeFreeNotifyResendAfterMinutes Int?
  sizeFreeNotifySentAt             DateTime?

  growthRateNotify                   Boolean?
  growthRateNotifyTypes              Notification[] @relation("growthRateNotifyTypesTable")
  growthRateValue                    Int?
  growthRateNotifyResendAfterMinutes Int?
  growthRateNotifySentAt             DateTime?

  logs MonitorLogs[]

  @@unique([monitorId, name])
}

model Notification {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  type             String
  smtpPort         String?
  smtpUsername     String?
  smtpHost         String?
  smtpPassword     String?
  smtpSecurity     String?
  ignoreSSLErrors  Boolean?
  smtpFromName     String?
  smtpFromEmail    String?
  smtpToEmail      String?
  tgBotToken       String?
  tgChatId         String?
  tgThreadId       String?
  tgSendSilently   Boolean?
  tgProtectMessage Boolean?

  driveMissingNotify    Drive[] @relation("missingNotifyTypesTable")
  drivePercFreeNotify   Drive[] @relation("percFreeNotifyTypesTable")
  driveSizeFreeNotify   Drive[] @relation("sizeFreeNotifyTypesTable")
  driveGrowthRateNotify Drive[] @relation("growthRateNotifyTypesTable")

  monitorConnectionNotify Monitor[] @relation("connectionNotifyTypesTable")
  monitorRebootNotify     Monitor[] @relation("rebootNotifyTypesTable")
}

model DriveUsage {
  id String @id @default(cuid())

  drive   Drive  @relation(fields: [driveId], references: [id])
  driveId String

  createdAt DateTime @default(now())

  hasError Boolean @default(false)

  // fields sent from monitor
  used String?
  free String?
}
