datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  slug         String  @unique
  firstName    String?
  lastName     String?
  profilePhoto String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Monitor {
  id    String @id @default(cuid())
  title String
  type  String

  enabled  Boolean @default(true)
  hasError Boolean @default(false)

  host       String
  username   String
  password   String?
  port       String
  privateKey String?

  // fields sent from monitor
  caption      String?
  name         String?
  dnsHostName  String?
  domain       String?
  manufacturer String?
  model        String?
  os           String?
  osVersion    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  drives Drive[]
  logs   MonitorLogs[]
}

model MonitorLogs {
  id      String @id @default(cuid())
  message String
  type    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monitor   Monitor @relation(fields: [monitorId], references: [id])
  monitorId String
}

model Drive {
  id       String  @id @default(cuid())
  hasError Boolean @default(false)

  monitor   Monitor @relation(fields: [monitorId], references: [id])
  monitorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inactive Boolean @default(false)

  // fields sent from monitor
  location    String?
  name        String
  root        String?
  description String?
  size        String?

  daysTillFull String?
  growthRate   String?

  usage DriveUsage[]

  // notifications
  missingNotify                   Boolean?
  missingNotifyTypes              Notification[] @relation("missingNotifyTypesTable")
  missingNotifyResendAfterMinutes Int?
  missingNotifySentAt             DateTime?

  percFreeNotify                   Boolean?
  percFreeNotifyTypes              Notification[] @relation("percFreeNotifyTypesTable")
  percFreeValue                    Int?
  percFreeNotifyResendAfterMinutes Int?
  percFreeNotifySentAt             DateTime?

  sizeFreeNotify                   Boolean?
  sizeFreeNotifyTypes              Notification[] @relation("sizeFreeNotifyTypesTable")
  sizeFreeValue                    Int?
  sizeFreeNotifyResendAfterMinutes Int?
  sizeFreeNotifySentAt             DateTime?

  growthRateNotify                   Boolean?
  growthRateNotifyTypes              Notification[] @relation("growthRateNotifyTypesTable")
  growthRateValue                    Int?
  growthRateNotifyResendAfterMinutes Int?
  growthRateNotifySentAt             DateTime?

  logs DriveLogs[]

  @@unique([monitorId, name])
}

model DriveLogs {
  id      String @id @default(cuid())
  message String
  type    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  drive   Drive  @relation(fields: [driveId], references: [id])
  driveId String
}

model Notification {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  type             String
  smtpPort         String?
  smtpUsername     String?
  smtpHost         String?
  smtpPassword     String?
  smtpSecurity     String?
  ignoreSSLErrors  Boolean?
  smtpFromName     String?
  smtpFromEmail    String?
  smtpToEmail      String?
  tgBotToken       String?
  tgChatId         String?
  tgThreadId       String?
  tgSendSilently   Boolean?
  tgProtectMessage Boolean?

  driveMissingNotify    Drive[] @relation("missingNotifyTypesTable")
  drivePercFreeNotify   Drive[] @relation("percFreeNotifyTypesTable")
  driveSizeFreeNotify   Drive[] @relation("sizeFreeNotifyTypesTable")
  driveGrowthRateNotify Drive[] @relation("growthRateNotifyTypesTable")
}

model DriveUsage {
  id String @id @default(cuid())

  drive   Drive  @relation(fields: [driveId], references: [id])
  driveId String

  createdAt DateTime @default(now())

  // fields sent from monitor
  used String?
  free String?
}
